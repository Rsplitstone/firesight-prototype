version: '3.8'

services:
  # Frontend service serving the live dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - API_URL=http://api:8000
      - NODE_ENV=production
    depends_on:
      - api
    networks:
      - firesight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API service with enhanced configuration
  api:
    build: ./api
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_DEBUG=false
      - NASA_API_KEY=${NASA_API_KEY}
      - DATABASE_URL=sqlite:///./firesight.db
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - api_data:/app/database
    depends_on:
      - redis
      - backend
    networks:
      - firesight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced backend service
  backend:
    build: ./backend
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - NASA_API_KEY=${NASA_API_KEY}
      - LOG_LEVEL=INFO
      - DATA_RETENTION_DAYS=30
      - MAX_WORKERS=4
    volumes:
      - ./data:/app/data
      - ./backend/logs:/app/logs
      - backend_cache:/app/cache
    depends_on:
      - redis
    networks:
      - firesight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - firesight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - api
    networks:
      - firesight-network
    restart: unless-stopped
    profiles:
      - production

  # Database for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=firesight
      - POSTGRES_USER=firesight
      - POSTGRES_PASSWORD=${DB_PASSWORD:-firesight123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - firesight-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U firesight"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
  api_data:
    driver: local
  backend_cache:
    driver: local
  nginx_logs:
    driver: local
  postgres_data:
    driver: local

networks:
  firesight-network:
    driver: bridge
